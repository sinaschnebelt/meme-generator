{"version":3,"sources":["Components/SaveMemeComponent.js","Components/UploadComponent.js","Components/MemeEditComponent.js","Components/MemeGalleryComponent.js","Components/LoginComponent.js","App.js","index.js"],"names":["SaveMemeComponent","props","saveImageToDB","event","console","log","imageFormObj","FormData","append","getFormattedTime","memeTitle","editedMemeToSave","formData","URLSearchParams","pair","fetch","mode","method","body","then","data","status","catch","err","imageName","url","name","toString","response","json","today","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","type","id","onClick","this","Component","types","UploadComponent","uploadImage","selectedFile","target","files","includes","alert","join","reader","FileReader","readAsDataURL","onloadend","e","addImageProcess","result","img","setState","currentImg","src","width","height","document","getElementById","innerHTML","enlargeImage","obj","temp","selectedMeme","state","Promise","resolve","reject","Image","onload","onerror","className","htmlFor","hidden","onChange","MemeEditComponent","drawMeme","dHeight","dWidth","canvas","ctx","getContext","createdImg","crossOrigin","a","drawImage","font","fontStyle","fontWeight","fontSize","fillStyle","color","fillText","caption","textXCoord","textYCoord","toDataURL","temporaryImg","addButtonClicked","base64Img","rawImageSrc","drawByHand","value","canvasHandDrawn","ctxHD","style","display","drawnByHand","imgHD","drawLine","buttons","beginPath","lineWidth","strokeStyle","moveTo","posX","posY","setPosition","lineTo","stroke","closePath","endDrawByHand","drawnLine","offsetLeft","getBoundingClientRect","left","offsetTop","top","clientX","clientY","showCaption","boldFormatting","bold","italicFormatting","italic","fontSizeFormatting","fontColorFormatting","moveLeft","prevState","moveUp","moveRight","moveDown","permanentlyAddCaption","changeMemeTitle","saveButtonDisabled","_isMounted","canvasMounted","createElement","addEventListener","prevProps","image","length","alt","useMap","placeholder","zIndex","margin","showSavedImage","href","download","MemeGalleryComponent","showmoreMemes","sampleMemes","headers","i","push","isLoaded","memes","error","memesArray","forEach","meme","message","photos","LoginComponent","handleUserNameChange","userName","handleUserPasswordChange","userPassword","login","setToken","JSON","stringify","request","App","token","sessionStorage","setItem","bind","shownComponent","ReactDOM","render"],"mappings":"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","file":"static/js/main.4913218f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst types = ['image/png', 'image/jpg','image/jpeg', 'image/gif'];\r\n\r\nclass SaveMemeComponent extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n\r\n    //save uploaded image to databse with unique imageName(originalName + currentDate in milliseconds)\r\n    saveImageToDB = (event) => {\r\n        console.log(event);\r\n        let imageFormObj = new FormData();\r\n\r\n        imageFormObj.append(\"imageName\", this.getFormattedTime()+ '_' +this.props.memeTitle);\r\n        imageFormObj.append('imageData', this.props.editedMemeToSave);\r\n\r\n        let formData = new URLSearchParams();\r\n\r\n        for (const pair of imageFormObj) {\r\n            formData.append(pair[0], pair[1]);\r\n        }\r\n\r\n        fetch('/image/upload', {\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            /*\r\n             headers: {\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            */\r\n            body: formData,\r\n        })\r\n            .then((data) => {\r\n                //this.getImageByName(imageFormObj.get(\"imageName\"));\r\n                if(data.status === 200){\r\n                    console.log('Image has been uploaded to database');\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n\r\n    /*check if image with specific imageName is stored in database,\r\n    if image exists in database it is stored in variable \"data\"\r\n    TODO: check by ID instead by name*/\r\n    getImageByName(imageName){\r\n        var params = {name: imageName};\r\n        var url = '/image/singleMeme?' + new URLSearchParams(params).toString();\r\n        fetch(url)\r\n            .then((response) => {\r\n                if(response.status === '200'){\r\n                    return response.json();\r\n                }\r\n            }).then((data) =>{\r\n        })\r\n            .catch((err) => {\r\n                console.log(err);\r\n\r\n            });\r\n\r\n    }\r\n\r\n\r\n    getFormattedTime() {\r\n        const today = new Date();\r\n        const y = today.getFullYear();\r\n        // JavaScript months are 0-based.\r\n        const m = today.getMonth() + 1;\r\n        const d = today.getDate();\r\n        const h = today.getHours();\r\n        const mi = today.getMinutes();\r\n        const s = today.getSeconds();\r\n        return y + \"-\" + m + \"-\" + d + \"-\" + h + \"-\" + mi + \"-\" + s;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <button type=\"button\" id=\"memesaver\" onClick={this.saveImageToDB}>Save meme</button>\r\n        )\r\n    }\r\n}\r\nexport default SaveMemeComponent;","import React, { Component } from 'react';\r\nimport { FaUpload } from 'react-icons/fa';\r\n\r\nconst types = ['image/png', 'image/jpg','image/jpeg', 'image/gif'];\r\n\r\nclass UploadComponent extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            currentImg: {},\r\n            selectedFile: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n    }\r\n  \r\n  /*called when user uploads a file, which is being checked on supported file format.\r\n  If the file is an image it is being saved in the database.\r\n  The uploaded file is then set as enlarged image and added to the Gallery*/\r\n  uploadImage = (event) => {\r\n    \r\n    const selectedFile = event.target.files[0];\r\n\r\n    //check if uploaded file is supported file format\r\n    if (types.includes(selectedFile.type) !== true) {\r\n      alert(\"Sorry, \" + selectedFile.type + \" is invalid file type, allowed file types are: \" + types.join(\", \"));\r\n    } else {\r\n\r\n      this.saveImageToDB();\r\n\r\n      const reader = new FileReader();\r\n  \r\n      reader.readAsDataURL(selectedFile);\r\n      reader.onloadend = (e) => {\r\n        this.addImageProcess(reader.result).then(img => {\r\n            this.setState({\r\n              currentImg: {\r\n                  src: img.src,\r\n                  width: img.width,\r\n                  height: img.height,\r\n                  name: selectedFile.name\r\n              }\r\n            });\r\n\r\n             /*obj = {\r\n                          src: img.src,\r\n                          width: img.width,\r\n                          height: img.height\r\n                      }\r\n                      this.enlargeImage(obj);\r\n                      this.setState(state => ({\r\n                          memes: [...state.memes, obj]\r\n                      }))*/          \r\n          //this.props.enlargeImage(this.state.currentImg);\r\n          document.getElementById('file-chosen').innerHTML = selectedFile.name;\r\n        }    \r\n        );  \r\n      }\r\n    } \r\n  }\r\n\r\n  //turn the uploaded file into an img which can be displayed\r\n  addImageProcess(src){\r\n    return new Promise((resolve, reject) => {\r\n      let img = new Image();\r\n      img.src = src\r\n      img.onload = function (){\r\n        resolve(img);\r\n      }\r\n      img.onerror = reject\r\n\r\n    })\r\n  }\r\n\r\n    //enlarge clicked iumage from Galery or an image uploaded from the user\r\n  enlargeImage = (obj) => {\r\n      let temp = {\r\n          src: obj.src,\r\n          width: obj.width,\r\n          height: obj.height,\r\n          name: obj.name\r\n      }\r\n      this.setState({selectedMeme: temp});\r\n  }\r\n\r\n\r\n  render(){\r\n      return(\r\n          <div className=\"btn-wrapper\">  \r\n              <label htmlFor=\"uploadBtn\">\r\n              <FaUpload /> Lade eigenes Bild hoch</label>   \r\n              <span id=\"file-chosen\"></span>             \r\n              <input type=\"file\" id=\"uploadBtn\" hidden onChange={(event) => this.uploadImage(event, \"upload\")}>\r\n              </input>\r\n          </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default UploadComponent;\r\n","import React, { Component } from 'react';\r\nimport SaveMemeComponent from './SaveMemeComponent';\r\nimport UploadComponent from './UploadComponent';\r\nimport { FaDownload } from 'react-icons/fa';\r\n\r\nclass MemeEditComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            addButtonClicked: false,  \r\n            base64Img: '',\r\n            canvas:'',\r\n            caption: '',\r\n            color: 'black',\r\n            dHeight: '',\r\n            dWidth: '',\r\n            drawnByHand: false,\r\n            font: 'Arial',\r\n            fontSize: '72px', \r\n            fontStyle: 'normal',\r\n            fontWeight: 'normal',\r\n            posX: 0,\r\n            posY: 0,\r\n            temporaryImg: '',\r\n            textXCoord: 100,\r\n            textYCoord: 100,\r\n            saveButtonDisabled: true, \r\n            memeTitle: '',       \r\n        }\r\n         this._isMounted = false;\r\n    }\r\n\r\n    \r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n\r\n        const canvasMounted = document.createElement('canvas');\r\n        this.setState({\r\n            canvas: canvasMounted\r\n        }/*, this.drawMeme*/)\r\n\r\n        const canvasHandDrawn = document.getElementById('handDrawnCanvas');\r\n\r\n        canvasHandDrawn.addEventListener('mouseenter', this.setPosition)\r\n        canvasHandDrawn.addEventListener('mousedown', this.setPosition)\r\n        canvasHandDrawn.addEventListener('mousemove', this.drawLine)\r\n        //document.getElementById(\"memesaver\").disabled = true;\r\n    }\r\n\r\n    /** To fix warning: Can't perform a React state update on an unmounted component. This is a no-op, \r\n    but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous \r\n    tasks in the componentWillUnmount method.\r\n    */\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(this.props.rawImageSrc !== prevProps.rawImageSrc){\r\n            document.getElementById('capInput').value = '';\r\n            /** All previously typed in text gets deleted from the WYSIWYG \r\n                editor, so new text can be added and adjusted\r\n            */\r\n            this.setState({    \r\n                addButtonClicked: false,  \r\n                caption: '',\r\n                color: 'black',\r\n                dHeight: '',\r\n                dWidth: '',\r\n                drawnByHand: false,\r\n                font: 'sans-serif',\r\n                fontSize: '72px', \r\n                fontStyle: 'normal',\r\n                fontWeight: 'normal',\r\n                posX: 0,\r\n                posY: 0,\r\n                temporaryImg: this.props.rawImageSrc, \r\n                textXCoord: 100,\r\n                textYCoord: 100,\r\n                saveButtonDisabled: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    drawMeme = () => {    \r\n\r\n        if(this.state.dHeight === ''){\r\n            const dHeight = document.getElementById('selectedMeme').height;\r\n            const dWidth = document.getElementById('selectedMeme').width;\r\n            this.setState({\r\n                dHeight: dHeight,\r\n                dWidth: dWidth\r\n            })\r\n        }\r\n            \r\n\r\n        const canvas = this.state.canvas;\r\n        const ctx = canvas.getContext('2d');\r\n            \r\n        // Adjust the size of the canvas\r\n        ctx.canvas.width = this.state.dWidth;\r\n        ctx.canvas.height = this.state.dHeight;\r\n\r\n        let createdImg = '';\r\n        const img = new Image();\r\n        img.crossOrigin = \"anonymous\";  // This enables CORS\r\n        img.onload = async() => {\r\n            ctx.drawImage(img, 0, 0, this.state.dWidth, this.state.dHeight);\r\n            // context.font=\"italic small-caps bold 12px arial\";\r\n            ctx.font = this.state.fontStyle + ' normal ' + this.state.fontWeight + ' ' + this.state.fontSize + ' ' + this.state.font;\r\n            ctx.fillStyle = this.state.color;\r\n            ctx.fillText(this.state.caption, this.state.textXCoord, this.state.textYCoord);\r\n            createdImg = await canvas.toDataURL();\r\n            this.setState({ temporaryImg: createdImg }) // The link to the image (see img HTML below as an example)\r\n        };\r\n\r\n        if(this.state.addButtonClicked){\r\n            img.src = this.state.base64Img;\r\n        } else {\r\n            img.src = this.props.rawImageSrc;                \r\n        }       \r\n    }\r\n\r\n    drawByHand = () => {  \r\n        document.getElementById('capInput').value = '';\r\n\r\n        const canvasHandDrawn = document.getElementById('handDrawnCanvas');\r\n        const ctxHD = canvasHandDrawn.getContext('2d');\r\n        canvasHandDrawn.style.display = 'block';\r\n\r\n        this.setState({ drawnByHand: true })\r\n\r\n        if(this.state.dHeight === ''){\r\n            const dHeight = document.getElementById('selectedMeme').height;\r\n            const dWidth = document.getElementById('selectedMeme').width;\r\n            this.setState({\r\n                dHeight: dHeight,\r\n                dWidth: dWidth\r\n            })\r\n        }\r\n        \r\n        // Adjust the size of the canvas\r\n        ctxHD.canvas.width = this.state.dWidth;\r\n        ctxHD.canvas.height = this.state.dHeight;\r\n\r\n        const imgHD = new Image();\r\n        imgHD.crossOrigin = \"anonymous\";  // This enables CORS\r\n        imgHD.onload = () => {\r\n            ctxHD.drawImage(imgHD, 0, 0, this.state.dWidth, this.state.dHeight);\r\n        };\r\n        if(this.state.addButtonClicked){\r\n            imgHD.src = this.state.base64Img;\r\n        } else {\r\n            imgHD.src = this.props.rawImageSrc;                \r\n        }  \r\n    }\r\n\r\n    drawLine = (event) => {\r\n        const canvasHandDrawn = document.getElementById('handDrawnCanvas');\r\n        const ctxHD = canvasHandDrawn.getContext('2d');\r\n\r\n        if (event.buttons !== 1) return; // mouse must be hold clicked\r\n        ctxHD.beginPath(); \r\n        ctxHD.lineWidth = 5;\r\n        ctxHD.strokeStyle = this.state.color;\r\n        ctxHD.moveTo(this.state.posX, this.state.posY);\r\n        this.setPosition(event);\r\n        ctxHD.lineTo(this.state.posX, this.state.posY); \r\n        ctxHD.stroke(); \r\n        ctxHD.closePath();\r\n    }\r\n\r\n    endDrawByHand = () => {\r\n        const canvasHandDrawn = document.getElementById('handDrawnCanvas');\r\n        canvasHandDrawn.style.display = 'none';\r\n        document.getElementById('capInput').value = '';\r\n\r\n\r\n        // Saves image with background image\r\n        let drawnLine = ''\r\n        drawnLine = canvasHandDrawn.toDataURL();\r\n        this.setState({ \r\n            addButtonClicked: true, \r\n            base64Img: drawnLine, \r\n            drawnByHand: false, \r\n            temporaryImg: drawnLine \r\n        }) \r\n    }\r\n\r\n    setPosition = (event) => {\r\n        const offsetLeft = document.getElementById('handDrawnCanvas').getBoundingClientRect().left;\r\n        const offsetTop = document.getElementById('handDrawnCanvas').getBoundingClientRect().top;\r\n        this.setState({\r\n            posX: event.clientX - offsetLeft,\r\n            posY: event.clientY - offsetTop\r\n        })\r\n    }\r\n\r\n    showCaption = (event) => { \r\n        if(this.state.drawnByHand === false){\r\n            this.setState({ caption: event.target.value });    \r\n            this.drawMeme()    \r\n        } else {\r\n            alert('Hand drawing mode needs to closed first')\r\n        }       \r\n    }\r\n\r\n    //Config of text formatting options\r\n    boldFormatting = (event) => {\r\n        const bold = this.state.fontWeight === 'normal' ? 'bold' : 'normal';\r\n        this.setState({ fontWeight: bold });\r\n        this.drawMeme()\r\n    }\r\n    italicFormatting = (event) => {\r\n        const italic = this.state.fontStyle === 'normal' ? 'italic' : 'normal';\r\n        this.setState({ fontStyle: italic });\r\n        this.drawMeme()\r\n    }\r\n    font = (event) => {\r\n        this.setState({ font: event.target.value });\r\n        this.drawMeme()\r\n    }\r\n    fontSizeFormatting = (event) => {\r\n        this.setState({ fontSize: event.target.value });\r\n        this.drawMeme()\r\n    }\r\n    fontColorFormatting = (event) => {\r\n        this.setState({ color: event.target.value });\r\n        this.drawMeme();\r\n    }\r\n\r\n    moveLeft = () => {   \r\n        this.setState((prevState) => ({\r\n            textXCoord: prevState.textXCoord - 50\r\n        }));\r\n        this.drawMeme()\r\n    }\r\n\r\n    moveUp = () => {   \r\n        this.setState((prevState) => ({\r\n            textYCoord: prevState.textYCoord - 50\r\n        }));\r\n        this.drawMeme()\r\n    }\r\n\r\n    moveRight = () => {   \r\n        this.setState((prevState) => ({\r\n            textXCoord: prevState.textXCoord + 50\r\n        }));\r\n        this.drawMeme();\r\n    }\r\n\r\n    moveDown = () => {   \r\n        this.setState((prevState) => ({\r\n            textYCoord: prevState.textYCoord + 50\r\n        }));\r\n        this.drawMeme()\r\n    }\r\n\r\n    permanentlyAddCaption = () => {        \r\n        document.getElementById('capInput').value = '';\r\n\r\n        /** All previously typed in text gets deleted from the WSYWIG \r\n            editor, so new text can be added and adjusted\r\n        */\r\n        this.setState({\r\n            addButtonClicked: true,\r\n            base64Img: this.state.temporaryImg, \r\n            caption: '',\r\n            textYCoord: this.state.textYCoord + 150\r\n        }, this.drawMeme); // drawMeme is a callback here so setState is finished before drawMeme() is being called\r\n    }\r\n\r\n    //set the image name (the image name is not showing up in the browser, but it will be an attribute of the meme in the backend)\r\n    changeMemeTitle = (event) => {\r\n        if(event.target.value !== \"\"){\r\n            //document.getElementById(\"memesaver\").disabled = false;\r\n        } else {\r\n            //document.getElementById(\"memesaver\").disabled = true; \r\n             \r\n        }\r\n        this.setState({ memeTitle: event.target.value });\r\n        this.drawMeme();\r\n    }\r\n\r\n    \r\n    render() {\r\n        let image;\r\n        if(this.state.drawnByHand === false){\r\n            if(this.state.temporaryImg.length < 7){\r\n                image = <img id=\"selectedMeme\" src={this.props.rawImageSrc} alt=\"Can't be displayed\" useMap=\"#planetmap\" />\r\n            } else {\r\n                image = <img id=\"selectedMeme\" src={this.state.temporaryImg} alt=\"Can't be displayed\" useMap=\"#planetmap\" />\r\n            }    \r\n        }\r\n         \r\n        return (\r\n            <div>\r\n            <input type=\"text\" id=\"ImageCaption\" placeholder=\"Image Title\" name=\"ImageCaption\" onChange={this.changeMemeTitle}></input><br></br>\r\n                <div className=\"image\" id=\"image\">\r\n                    {image}\r\n                    <canvas id=\"handDrawnCanvas\" style={{\r\n                        zIndex: \"2\",\r\n                        //top: \"0px\",\r\n                        //left: \"0px\",\r\n                        //position: \"absolute\",\r\n                        display: \"none\",\r\n                        width: this.state.dWidth,\r\n                        height: this.state.dHeight,\r\n                        margin: \"auto\"\r\n                    }}></canvas>\r\n                </div>\r\n                <div>{this.state.showSavedImage}</div> {/*Dummy div*/}\r\n\r\n                <div className=\"cap\" id=\"cap\" style={{\r\n                    color: this.state.color,\r\n                    fontSize: this.state.fontSize,\r\n                    fontWeight: this.state.fontWeight,\r\n                    fontStyle: this.state.fontStyle\r\n                }}>\r\n                </div>\r\n                <button onClick={this.drawByHand}>Start hand drawing mode</button>\r\n                <button onClick={this.endDrawByHand}>End hand drawing mode</button>\r\n                <div className=\"Formatting\">\r\n                    <button onClick={this.boldFormatting}><strong>B</strong></button>\r\n                    <button onClick={this.italicFormatting} ><em>I</em></button>\r\n                    <select name=\"FontSize\" onChange={this.fontSizeFormatting}>\r\n                        <option value=\"84px\">84</option>\r\n                        <option value=\"72px\">72</option>\r\n                        <option value=\"64px\">64</option>\r\n                        <option value=\"32px\">32</option>\r\n                    </select>\r\n                    <select name=\"Font\" onChange={this.font}>\r\n                        <option value=\"Arial\">Arial</option>\r\n                        <option value=\"Times\">Times</option>\r\n                        <option value=\"Andale Mono\">Andale Mono</option>\r\n                        <option value=\"Comic Sans MS\">Comic Sans MS</option>\r\n                    </select>\r\n                    <input type=\"color\" onChange={this.fontColorFormatting}></input>\r\n                    <button onClick={this.moveLeft}>&#8592;</button>\r\n                    <button onClick={this.moveUp}>&#8593;</button>\r\n                    <button onClick={this.moveRight}>&#8594;</button>\r\n                    <button onClick={this.moveDown}>&#8595;</button>\r\n                    <button onClick={this.permanentlyAddCaption}>Add text permanently to image</button>\r\n                </div>\r\n                <input type=\"text\" id=\"capInput\" placeholder=\"Add text\" name=\"capInput\" onChange={this.showCaption}></input>\r\n\r\n                <div className=\"btn-wrapper\">  \r\n                    <label >\r\n                        <a href={this.state.temporaryImg} download><FaDownload />Meme speichern</a>\r\n                    </label>\r\n                </div>\r\n                \r\n                <SaveMemeComponent editedMemeToSave={this.state.temporaryImg} memeTitle={this.state.memeTitle}/>\r\n                <UploadComponent enlargeImage={this.props.enlargeImage} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MemeEditComponent;","import React, { Component } from 'react';\r\nimport MemeEditComponent from \"./MemeEditComponent\";\r\n\r\n\r\n//import image from '../Images/img1.jpg';\r\n/*\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015-2018 Sandra Gonzales\r\nhttps://github.com/neptunian/react-photo-gallery/\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nGallery is a responsive, accessible, composable, and customizable image gallery component which\r\nmaintains the original aspect ratio of your photos. Supports row or column direction layout. It also\r\nprovides an image renderer for custom implementation of things like image selection, favorites, captions, etc.\r\n*/\r\nimport Gallery from 'react-photo-gallery';\r\n\r\nclass MemeGalleryComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: false,\r\n            error: null,\r\n            memes: [],\r\n            selectedMeme: null\r\n        }\r\n    }\r\n\r\n\r\n    /*Currently memes are loaded from imgflip-API and stored in a local array (memes[]) with their url, width height\r\n      TODO: store memes with name & id*/\r\n    componentDidMount() {\r\n        fetch('https://api.imgflip.com/get_memes')\r\n            .then(response => response.json())\r\n            .then(\r\n                (result) => {\r\n\r\n                    const memesArray = [];\r\n                    const arr = result.data.memes;\r\n                    arr.forEach(meme => {\r\n                        const obj =\r\n                            {\r\n                                src: meme.url,\r\n                                width: meme.width,\r\n                                height: meme.height\r\n                            }\r\n                        if (memesArray.length < 10) {\r\n                            memesArray.push(obj)\r\n                        }\r\n                    })\r\n\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        memes: memesArray,\r\n                        selectedMeme: memesArray[0]\r\n                    });\r\n                },\r\n\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n\r\n            )\r\n\r\n    }\r\n\r\n    //enlarge clicked iumage from Galery or an image uploaded from the user\r\n    enlargeImage = (obj) => {\r\n        let temp = {\r\n            src: obj.src,\r\n            width: obj.width,\r\n            height: obj.height,\r\n            name: obj.name\r\n        }\r\n        this.setState({selectedMeme: temp});\r\n    }\r\n\r\n\r\n    //TODO: make page endless scroll?\r\n    showmoreMemes = (event) => {\r\n        const sampleMemes = [];\r\n\r\n        fetch('/samplememes', {\r\n            mode: 'cors',\r\n            method: 'get',\r\n            headers: {\r\n                'Access-Control-Allow-Origin': '*'\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n\r\n                for (var i in data) {\r\n                    const obj = {\r\n                        src: data[i].url,\r\n                        width: data[i].width,\r\n                        height: data[i].height\r\n                    }\r\n                    sampleMemes.push(obj);\r\n                }\r\n\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    memes: sampleMemes,\r\n                    selectedMeme: sampleMemes[0]\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { error, memes, selectedMeme, isLoaded } = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n\r\n            return (\r\n                <div className=\"container\" width=\"300px\">\r\n                    <h1>OMM Exercise 1</h1>\r\n                    <div className=\"App\">\r\n                        <MemeEditComponent rawImageSrc={selectedMeme.src} />\r\n                    </div>\r\n                    <div className=\"galleryContainer\">\r\n                        <button type=\"button\" id=\"samplememes\" onClick={this.showmoreMemes}>Show more memes</button>\r\n                        <Gallery photos={memes} onClick={(event) => this.enlargeImage(event.target)} margin={5}/>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default MemeGalleryComponent;","import React, {Component} from 'react';\r\n\r\nclass LoginComponent extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            userName: '',\r\n            userPassword: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    handleUserNameChange = (e) => {\r\n        this.setState({userName: e.target.value});\r\n    }\r\n\r\n    handleUserPasswordChange = (e) => {\r\n        this.setState({userPassword: e.target.value});\r\n    }\r\n\r\n    login = () => {\r\n        this.props.setToken(\"true\");\r\n        const data = {\r\n            userName: this.state.userName,\r\n            userPassword: this.state.userPassword\r\n        }\r\n        fetch('/users/createUser', {\r\n            method: 'post',\r\n            mode: 'cors',\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then((data) => {\r\n                if(data.status === 200){\r\n                    console.log('User has been stored to database');\r\n                }\r\n            })\r\n            .catch((error) => console.log( error.response.request) );\r\n    }\r\n\r\n    render(){\r\n\r\n\r\n        return(\r\n            <div className=\"loginform-wrapper\">\r\n                <div className=\"loginform\">\r\n                    <h1 id=\"logincaption\">Please Log In</h1>\r\n                    <form>\r\n                        <label>\r\n                            <p>Username</p>\r\n                            <input type=\"text\" value={this.state.userName} onChange={this.handleUserNameChange}/>\r\n                        </label>\r\n                        <label>\r\n                            <p>Password</p>\r\n                            <input type=\"password\" value={this.state.userPassword} onChange={this.handleUserPasswordChange} />\r\n                        </label>\r\n                        <div>\r\n                            <button type=\"submit\" onClick={() => {this.login()}}>Submit</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default LoginComponent;","\r\nimport React, { Component } from 'react';\r\nimport MemeGalleryComponent from './Components/MemeGalleryComponent';\r\nimport LoginComponent from './Components/LoginComponent';\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.setToken = this.setToken.bind(this);\r\n        this.state = {\r\n            token: null\r\n        };\r\n    }\r\n\r\n    setToken = (value) => {\r\n        this.setState({token: value})\r\n        sessionStorage.setItem('token', JSON.stringify(value))\r\n    }\r\n\r\n    render(){\r\n      let shownComponent;\r\n     \r\n      if(this.state.token === null){\r\n        shownComponent = <LoginComponent token={this.state.token} setToken={this.setToken}/>;\r\n      } else {\r\n        shownComponent = <MemeGalleryComponent/>;\r\n      }\r\n      \r\n      return(\r\n        <div>\r\n          {shownComponent}  \r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport './index.css';\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}