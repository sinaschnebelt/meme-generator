{"version":3,"sources":["Components/SaveMemeComponent.js","Components/UploadComponent.js","Components/ShareComponent.js","Components/MemeEditComponent.js","Components/MemeGalleryComponent.js","Components/LoginComponent.js","Components/HelmetMetaData.js","App.js","index.js"],"names":["SaveMemeComponent","saveImageToDB","event","console","log","imageFormObj","FormData","append","getFormattedTime","props","memeTitle","editedMemeToSave","formData","URLSearchParams","pair","fetch","mode","method","body","then","data","status","catch","err","imageName","url","name","toString","response","json","today","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","className","type","id","onClick","this","disabled","Component","types","UploadComponent","uploadImage","selectedFile","target","files","includes","alert","join","reader","FileReader","readAsDataURL","onloadend","e","addImageProcess","result","img","setState","currentImg","src","width","height","imageUploaded","state","document","getElementById","innerHTML","Promise","resolve","reject","Image","onload","onerror","htmlFor","hidden","onChange","ShareComponent","shareUrl","window","location","href","FacebookShareButton","quote","image","memeToShare","description","recognition","SpeechRecognition","webkitSpeechRecognition","continous","interimResults","lang","MemeEditComponent","drawMeme","canvas","ctx","getContext","canvasWidth","canvasHeight","createdImg","crossOrigin","a","drawImage","font","fontStyle","fontWeight","fontSize","fillStyle","color","fillText","caption","textXCoord","textYCoord","toDataURL","temporaryImg","addButtonClicked","base64Img","selectedMeme","drawByHand","value","canvasHandDrawn","ctxHD","style","display","drawnByHand","imgHD","drawLine","buttons","beginPath","lineWidth","strokeStyle","moveTo","posX","posY","setPosition","lineTo","stroke","closePath","endDrawByHand","drawnLine","offsetLeft","getBoundingClientRect","left","offsetTop","top","clientX","clientY","showCaption","boldFormatting","bold","italicFormatting","italic","fontSizeFormatting","fontColorFormatting","moveLeft","prevState","moveUp","moveRight","moveDown","permanentlyAddCaption","changeMemeTitle","pointerEvents","saveButtonDisabled","listening","_isMounted","toggleListen","bind","handleListen","canvasMounted","createElement","addEventListener","prevProps","classList","add","start","onend","stop","remove","onstart","finalTranscript","onresult","i","resultIndex","results","length","transcript","isFinal","transcriptArr","split","stopCmd","slice","finalText","error","alt","useMap","placeholder","zIndex","margin","showSavedImage","class","download","MemeGalleryComponent","enlargeImage","obj","memesToMerge","temp","appendImage","cursor","push","memePromises","promises","mergeImages","all","values","newImageSrc","loadImage","Error","options","showmoreMemes","sampleMemes","headers","isLoaded","memes","setWidth","num","parseInt","isNaN","setHeight","uploadedImage","memesArray","forEach","meme","message","photos","LoginComponent","handleUserNameChange","userName","handleUserPasswordChange","userPassword","login","setToken","JSON","stringify","request","HelmetMetaData","currentUrl","undefined","title","hashtag","Helmet","charset","http-equiv","content","property","App","token","sessionStorage","setItem","shownComponent","ReactDOM","render"],"mappings":"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","file":"static/js/main.38a4863e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SaveMemeComponent extends Component {\n    \n    //save uploaded image to databse with unique imageName(originalName + currentDate in milliseconds)\n    saveImageToDB = (event) => {\n        console.log(event);\n        let imageFormObj = new FormData();\n\n        imageFormObj.append(\"imageName\", this.getFormattedTime()+ '_' +this.props.memeTitle);\n        imageFormObj.append('imageData', this.props.editedMemeToSave);\n\n        let formData = new URLSearchParams();\n\n        for (const pair of imageFormObj) {\n            formData.append(pair[0], pair[1]);\n        }\n\n        fetch('/image/upload', {\n            mode: 'cors',\n            method: 'POST',\n            /*\n             headers: {\n                'Access-Control-Allow-Origin': '*',\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            */\n            body: formData,\n        })\n            .then((data) => {\n                //this.getImageByName(imageFormObj.get(\"imageName\"));\n                if(data.status === 200){\n                    console.log('Image has been uploaded to database');\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n\n    /*check if image with specific imageName is stored in database,\n    if image exists in database it is stored in variable \"data\"\n    TODO: check by ID instead by name*/\n    getImageByName(imageName){\n        var params = {name: imageName};\n        var url = '/image/singleMeme?' + new URLSearchParams(params).toString();\n        fetch(url)\n            .then((response) => {\n                if(response.status === '200'){\n                    return response.json();\n                }\n            }).then((data) =>{\n        })\n            .catch((err) => {\n                console.log(err);\n\n            });\n\n    }\n\n\n    getFormattedTime() {\n        const today = new Date();\n        const y = today.getFullYear();\n        // JavaScript months are 0-based.\n        const m = today.getMonth() + 1;\n        const d = today.getDate();\n        const h = today.getHours();\n        const mi = today.getMinutes();\n        const s = today.getSeconds();\n        return y + \"-\" + m + \"-\" + d + \"-\" + h + \"-\" + mi + \"-\" + s;\n    }\n\n\n    render() {\n        return (\n            <div className=\"btn-wrapper\">             \n              <button type=\"button\" id=\"memesaver\" onClick={this.saveImageToDB} disabled={this.props.memeTitle ==\"\"}>Meme generieren</button>\n          </div>\n            \n        )\n    }\n}\nexport default SaveMemeComponent;","import React, { Component } from 'react';\nimport { FaUpload } from 'react-icons/fa';\n\nconst types = ['image/png', 'image/jpg','image/jpeg', 'image/gif'];\n\nclass UploadComponent extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state= {\n            currentImg: {},\n            selectedFile: {}\n        }\n    }\n\n    componentDidMount(){\n\n    }\n  \n  /*called when user uploads a file, which is being checked on supported file format.\n  If the file is an image it is being saved in the database.\n  The uploaded file is then set as enlarged image and added to the Gallery*/\n  uploadImage = (event) => {\n    \n    const selectedFile = event.target.files[0];\n\n    //check if uploaded file is supported file format\n    if (types.includes(selectedFile.type) !== true) {\n      alert(\"Sorry, \" + selectedFile.type + \" is invalid file type, allowed file types are: \" + types.join(\", \"));\n    } else {\n\n      // this.saveImageToDB(); Does it need to be saved directly? Shouldn't it just be saved when clicking on \"Save meme\"\n\n      const reader = new FileReader();\n  \n      reader.readAsDataURL(selectedFile);\n      reader.onloadend = (e) => {\n        this.addImageProcess(reader.result).then(img => {\n            this.setState({\n              currentImg: {\n                  src: img.src,\n                  width: img.width,\n                  height: img.height,\n                  name: selectedFile.name\n              }\n            });\n          this.props.imageUploaded(this.state.currentImg)\n          document.getElementById('file-chosen').innerHTML = selectedFile.name;\n        }    \n        );  \n      }\n    } \n  }\n\n  //turn the uploaded file into an img which can be displayed\n  addImageProcess(src){\n    return new Promise((resolve, reject) => {\n      let img = new Image();\n      img.src = src\n      img.onload = function (){\n        resolve(img);\n      }\n      img.onerror = reject\n\n    })\n  }\n\n\n  render(){\n      return(\n          <div className=\"btn-wrapper\">  \n              <label htmlFor=\"uploadBtn\">\n              <FaUpload /> Lade eigenes Bild hoch</label>   \n              <span id=\"file-chosen\"></span>             \n              <input type=\"file\" id=\"uploadBtn\" hidden onChange={(event) => this.uploadImage(event, \"upload\")}>\n              </input>\n          </div>\n      );\n  }\n}\n\nexport default UploadComponent;\n","import React, { Component } from 'react';\nimport {FacebookShareButton,} from \"react-share\";\nimport { FaFacebook } from 'react-icons/fa';\n\n\nclass ShareComponent extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state= {\n\n        }\n    }\n\n    componentDidMount(){\n        \n    }\n\n    componentDidUpdate(){\n\n    }\n  \n  \n\n\n  render(){\n    const shareUrl = window.location.href; \n      return(\n          <div id=\"shareContainer\"> \n            <FacebookShareButton\n                url={\"http://localhost:3000/index.html\"}\n                quote={shareUrl}\n                className=\"socialMediaButton\"\n                image={this.props.memeToShare}\n                description={this.props.memeTitle}>\n                    <FaFacebook/>\n            </FacebookShareButton>\n          </div>\n\n      );\n  }\n}\n\nexport default ShareComponent;\n","import React, { Component } from 'react';\nimport SaveMemeComponent from './SaveMemeComponent';\nimport UploadComponent from './UploadComponent';\nimport ShareComponent from './ShareComponent'\nimport { FaDownload, FaMicrophone } from 'react-icons/fa';\n\n// Source SpeechRecording: \n// https://medium.com/@amanda.k.hussey/a-basic-tutorial-on-how-to-incorporate-speech-recognition-with-react-6dff9763cea5\n\n\nconst SpeechRecognition =\n  window.SpeechRecognition || window.webkitSpeechRecognition\nconst recognition = new SpeechRecognition()\n\nrecognition.continous = true\nrecognition.interimResults = true\nrecognition.lang = 'de'\n\nclass MemeEditComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            addButtonClicked: false,  \n            base64Img: '',\n            canvas:'',\n            caption: '',\n            color: 'black',\n            drawnByHand: false,\n            font: 'Arial',\n            fontSize: '72px', \n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            posX: 0,\n            posY: 0,\n            temporaryImg: '',\n            textXCoord: 100,\n            textYCoord: 100,\n            saveButtonDisabled: true, \n            memeTitle: '',  \n            listening: false,     \n        }\n         this._isMounted = false;\n         this.toggleListen = this.toggleListen.bind(this)\n         this.handleListen = this.handleListen.bind(this)\n    }\n\n    \n    componentDidMount() {\n        this._isMounted = true;\n\n        const canvasMounted = document.createElement('canvas');\n        this.setState({\n            canvas: canvasMounted,\n        }/*, this.drawMeme*/)\n\n\n        const canvasHandDrawn = document.getElementById('handDrawnCanvas');\n\n        canvasHandDrawn.addEventListener('mouseenter', this.setPosition)\n        canvasHandDrawn.addEventListener('mousedown', this.setPosition)\n        canvasHandDrawn.addEventListener('mousemove', this.drawLine)\n        //document.getElementById(\"memesaver\").disabled = true;\n    }\n\n    /** To fix warning: Can't perform a React state update on an unmounted component. This is a no-op, \n    but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous \n    tasks in the componentWillUnmount method.\n    */\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    componentDidUpdate(prevProps){\n        if(this.props.selectedMeme.src !== prevProps.selectedMeme.src){\n            document.getElementById('capInput').value = '';\n            /** All previously typed in text gets deleted from the WYSIWYG \n                editor, so new text can be added and adjusted\n            */\n            this.setState({    \n                addButtonClicked: false,  \n                caption: '',\n                color: 'black',\n                drawnByHand: false,\n                font: 'sans-serif',\n                fontSize: '72px', \n                fontStyle: 'normal',\n                fontWeight: 'normal',\n                posX: 0,\n                posY: 0,\n                temporaryImg: this.props.selectedMeme.src, \n                textXCoord: 100,\n                textYCoord: 100,\n                saveButtonDisabled: true,\n            })\n        }      \n    }\n\n    drawMeme = () => {   \n            \n        const canvas = this.state.canvas;\n        const ctx = canvas.getContext('2d');\n            \n        // Adjust the size of the canvas\n        ctx.canvas.width = this.props.canvasWidth;\n        ctx.canvas.height = this.props.canvasHeight;\n\n        let createdImg = '';\n        const img = new Image();\n        img.crossOrigin = \"anonymous\";  // This enables CORS\n        img.onload = async() => {\n            ctx.drawImage(img, 0, 0, this.props.canvasWidth, this.props.canvasHeight);\n            // context.font=\"italic small-caps bold 12px arial\";\n            ctx.font = this.state.fontStyle + ' normal ' + this.state.fontWeight + ' ' + this.state.fontSize + ' ' + this.state.font;\n            ctx.fillStyle = this.state.color;\n            ctx.fillText(this.state.caption, this.state.textXCoord, this.state.textYCoord);\n            createdImg = await canvas.toDataURL();\n            this.setState({ temporaryImg: createdImg }) // The link to the image (see img HTML below as an example)\n        };\n\n        if(this.state.addButtonClicked){\n            img.src = this.state.base64Img;\n        } else {\n            img.src = this.props.selectedMeme.src;                \n        } \n    }\n\n    drawByHand = () => {  \n        document.getElementById('capInput').value = '';\n\n        const canvasHandDrawn = document.getElementById('handDrawnCanvas');\n        const ctxHD = canvasHandDrawn.getContext('2d');\n        canvasHandDrawn.style.display = 'block';\n\n        this.setState({ drawnByHand: true })\n        \n        // Adjust the size of the canvas\n        ctxHD.canvas.width = this.props.canvasWidth;\n        ctxHD.canvas.height = this.props.canvasHeight;\n\n        const imgHD = new Image();\n        imgHD.crossOrigin = \"anonymous\";  // This enables CORS\n        imgHD.onload = () => {\n            ctxHD.drawImage(imgHD, 0, 0, this.props.canvasWidth, this.props.canvasHeight);\n        };\n        if(this.state.addButtonClicked){\n            imgHD.src = this.state.base64Img;\n        } else {\n            imgHD.src = this.props.selectedMeme.src;                \n        }  \n    }\n\n    drawLine = (event) => {\n        const canvasHandDrawn = document.getElementById('handDrawnCanvas');\n        const ctxHD = canvasHandDrawn.getContext('2d');\n\n        if (event.buttons !== 1) return; // mouse must be hold clicked\n        ctxHD.beginPath(); \n        ctxHD.lineWidth = 5;\n        ctxHD.strokeStyle = this.state.color;\n        ctxHD.moveTo(this.state.posX, this.state.posY);\n        this.setPosition(event);\n        ctxHD.lineTo(this.state.posX, this.state.posY); \n        ctxHD.stroke(); \n        ctxHD.closePath();\n    }\n\n    endDrawByHand = () => {\n        const canvasHandDrawn = document.getElementById('handDrawnCanvas');\n        canvasHandDrawn.style.display = 'none';\n        document.getElementById('capInput').value = '';\n\n\n        // Saves image with background image\n        let drawnLine = ''\n        drawnLine = canvasHandDrawn.toDataURL();\n        this.setState({ \n            addButtonClicked: true, \n            base64Img: drawnLine, \n            drawnByHand: false, \n            temporaryImg: drawnLine \n        }) \n    }\n\n    setPosition = (event) => {\n        const offsetLeft = document.getElementById('handDrawnCanvas').getBoundingClientRect().left;\n        const offsetTop = document.getElementById('handDrawnCanvas').getBoundingClientRect().top;\n        this.setState({\n            posX: event.clientX - offsetLeft,\n            posY: event.clientY - offsetTop\n        })\n    }\n\n    showCaption = (event) => { \n        console.log(event);\n        if(this.state.drawnByHand === false){\n            this.setState({ caption: document.getElementById('capInput').value });    \n            this.drawMeme()    \n        } else {\n            alert('Hand drawing mode needs to closed first')\n        }       \n    }\n\n    //Config of text formatting options\n    boldFormatting = (event) => {\n        const bold = this.state.fontWeight === 'normal' ? 'bold' : 'normal';\n        this.setState({ fontWeight: bold });\n        this.drawMeme()\n    }\n    italicFormatting = (event) => {\n        const italic = this.state.fontStyle === 'normal' ? 'italic' : 'normal';\n        this.setState({ fontStyle: italic });\n        this.drawMeme()\n    }\n    font = (event) => {\n        this.setState({ font: event.target.value });\n        this.drawMeme()\n    }\n    fontSizeFormatting = (event) => {\n        this.setState({ fontSize: event.target.value });\n        this.drawMeme()\n    }\n    fontColorFormatting = (event) => {\n        this.setState({ color: event.target.value });\n        this.drawMeme();\n    }\n\n    moveLeft = () => {   \n        this.setState((prevState) => ({\n            textXCoord: prevState.textXCoord - 50\n        }));\n        this.drawMeme()\n    }\n\n    moveUp = () => {   \n        this.setState((prevState) => ({\n            textYCoord: prevState.textYCoord - 50\n        }));\n        this.drawMeme()\n    }\n\n    moveRight = () => {   \n        this.setState((prevState) => ({\n            textXCoord: prevState.textXCoord + 50\n        }));\n        this.drawMeme();\n    }\n\n    moveDown = () => {   \n        this.setState((prevState) => ({\n            textYCoord: prevState.textYCoord + 50\n        }));\n        this.drawMeme()\n    }\n\n    permanentlyAddCaption = () => {        \n        document.getElementById('capInput').value = '';\n\n        /** All previously typed in text gets deleted from the WSYWIG \n            editor, so new text can be added and adjusted\n        */\n        this.setState({\n            addButtonClicked: true,\n            base64Img: this.state.temporaryImg, \n            caption: '',\n            textYCoord: this.state.textYCoord + 150\n        }, this.drawMeme); // drawMeme is a callback here so setState is finished before drawMeme() is being called\n    }\n\n    //set the image name (the image name is not showing up in the browser, but it will be an attribute of the meme in the backend)\n    changeMemeTitle = (event) => {\n        if(event.target.value !== \"\"){\n            document.getElementById(\"downloadBtn\").style.pointerEvents = \"auto\";\n        } else {\n            document.getElementById(\"downloadBtn\").style.pointerEvents = \"none\";\n        }\n        this.setState({ memeTitle: event.target.value });\n        this.drawMeme();\n    }\n\n    toggleListen() {\n        \n        this.setState({\n          listening: !this.state.listening\n        }, this.handleListen)\n        //ocument.getElementById('capInput').value = '';\n        console.log(this.state.listening);\n        document.getElementById('microphone-btn').classList.add(\"recording\");\n    }\n    \n    handleListen() {\n        //document.getElementById('capInput').value ='';\n        //console.log('listening?', this.state.listening)\n\n        if (this.state.listening) {\n            recognition.start()\n            recognition.onend = () => {\n            //console.log(\"...continue listening...\")\n            recognition.start()\n            }\n\n        } else {\n            recognition.stop()\n            recognition.onend = () => {\n                document.getElementById('microphone-btn').classList.remove(\"recording\");\n            //console.log(\"Stopped listening per click\")\n            }\n        }\n\n        recognition.onstart = () => {\n            //console.log(\"Listening!\");\n            //document.getElementById('capInput').value ='';\n        }\n\n        let finalTranscript = ''\n        recognition.onresult = event => {\n\n            for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n            if (event.results[i].isFinal) finalTranscript += transcript + ' ';\n            }\n            document.getElementById('capInput').value = finalTranscript;\n            this.showCaption();\n\n        //-------------------------COMMANDS------------------------------------\n\n            const transcriptArr = finalTranscript.split(' ')\n            const stopCmd = transcriptArr.slice(-3, -1)\n            console.log('stopCmd', stopCmd)\n\n            if (stopCmd[0] === 'stop' && stopCmd[1] === 'listening'){\n            recognition.stop()\n            recognition.onend = () => {\n                document.getElementById('microphone-btn').classList.remove(\"recording\");\n                console.log('Stopped listening per command')\n                const finalText = transcriptArr.slice(0, -3).join(' ')\n                document.getElementById('capInput').value = finalText;\n                this.showCaption();\n                \n            }\n            }\n        }\n        \n        //-----------------------------------------------------------------------\n        \n        recognition.onerror = event => {\n            console.log(\"Error occurred in recognition: \" + event.error)\n        }\n    \n      }\n    \n    render() {\n        let image;\n        if(this.state.drawnByHand === false){\n            if(this.state.temporaryImg.length < 7){\n                image = <img id=\"selectedMeme\" style={{width: this.props.canvasWidth, height: this.props.canvasHeight}} src={this.props.selectedMeme.src} alt=\"Can't be displayed\" useMap=\"#planetmap\" />\n            } else {\n                image = <img id=\"selectedMeme\" style={{width: this.props.canvasWidth, height: this.props.canvasHeight}} src={this.state.temporaryImg} alt=\"Can't be displayed\" useMap=\"#planetmap\" />\n            }    \n        }\n         \n        return (\n            <div>\n            <input type=\"text\" id=\"ImageCaption\" placeholder=\"Image Title\" name=\"ImageCaption\" onChange={this.changeMemeTitle}></input><br></br>\n                <div className=\"image\" id=\"image\">\n                    {image}\n                    <canvas id=\"handDrawnCanvas\" style={{\n                        zIndex: \"3\",\n                        //top: \"0px\",\n                        //left: \"0px\",\n                        //position: \"absolute\",\n                        display: \"none\",\n                        width: this.props.canvasWidth,\n                        height: this.props.canvasHeight,\n                        margin: \"auto\"\n                    }}></canvas>\n                </div>\n                <div>{this.state.showSavedImage}</div> {/*Dummy div*/}\n\n                <div className=\"cap\" id=\"cap\" style={{\n                    color: this.state.color,\n                    fontSize: this.state.fontSize,\n                    fontWeight: this.state.fontWeight,\n                    fontStyle: this.state.fontStyle\n                }}>\n                </div>\n                <button onClick={this.drawByHand}>Start hand drawing mode</button>\n                <button onClick={this.endDrawByHand}>End hand drawing mode</button>\n                <div className=\"Formatting\">\n                    <button onClick={this.boldFormatting}><strong>B</strong></button>\n                    <button onClick={this.italicFormatting} ><em>I</em></button>\n                    <select name=\"FontSize\" onChange={this.fontSizeFormatting}>\n                        <option value=\"84px\">84</option>\n                        <option value=\"72px\">72</option>\n                        <option value=\"64px\">64</option>\n                        <option value=\"32px\">32</option>\n                    </select>\n                    <select name=\"Font\" onChange={this.font}>\n                        <option value=\"Arial\">Arial</option>\n                        <option value=\"Times\">Times</option>\n                        <option value=\"Andale Mono\">Andale Mono</option>\n                        <option value=\"Comic Sans MS\">Comic Sans MS</option>\n                    </select>\n                    <input type=\"color\" onChange={this.fontColorFormatting}></input>\n                    <button onClick={this.moveLeft}>&#8592;</button>\n                    <button onClick={this.moveUp}>&#8593;</button>\n                    <button onClick={this.moveRight}>&#8594;</button>\n                    <button onClick={this.moveDown}>&#8595;</button>\n                    <button onClick={this.permanentlyAddCaption}>Add text permanently to image</button>\n                </div>\n                \n\n                <div id=\"capInputContainer\" class=\"row\">\n                    <button id=\"microphone-btn\"  onClick={this.toggleListen}><FaMicrophone /></button>\n                    <input type=\"text\" id=\"capInput\" placeholder=\"Add text\" name=\"capInput\" onChange={this.showCaption}></input>       \n                </div>\n\n                <div className =\"row\">\n                    <SaveMemeComponent editedMemeToSave={this.state.temporaryImg} memeTitle={this.state.memeTitle}/>\n                    \n                    <div className=\"btn-wrapper\">  \n                        <label >\n                            <a href={this.state.temporaryImg} download id=\"downloadBtn\"><FaDownload />Meme speichern</a>\n                        </label>\n                    </div>\n                    <ShareComponent memeToShare={this.state.temporaryImg} memeTitle={this.state.memeTitle}></ShareComponent>\n                </div>\n                            \n                \n\n            </div>\n        );\n    }\n}\nexport default MemeEditComponent;","import React, { Component } from 'react';\nimport MemeEditComponent from \"./MemeEditComponent\";\nimport UploadComponent from './UploadComponent';\n\n\n//import image from '../Images/img1.jpg';\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2015-2018 Sandra Gonzales\nhttps://github.com/neptunian/react-photo-gallery/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nGallery is a responsive, accessible, composable, and customizable image gallery component which\nmaintains the original aspect ratio of your photos. Supports row or column direction layout. It also\nprovides an image renderer for custom implementation of things like image selection, favorites, captions, etc.\n*/\nimport Gallery from 'react-photo-gallery';\n\nclass MemeGalleryComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            error: null,\n            memes: [],\n            selectedMeme: null,\n            canvasWidth: 500,\n            canvasHeight: 500,\n            memesToMerge: []\n        }\n    }\n\n\n    /*Currently memes are loaded from imgflip-API and stored in a local array (memes[]) with their url, width height\n      TODO: store memes with name & id*/\n    componentDidMount() {\n        fetch('https://api.imgflip.com/get_memes')\n            .then(response => response.json())\n            .then(\n                (result) => {\n\n                    const memesArray = [];\n                    const arr = result.data.memes;\n                    arr.forEach(meme => {\n                        const obj =\n                            {\n                                src: meme.url,\n                                width: meme.width,\n                                height: meme.height\n                            }\n                        if (memesArray.length < 10) {\n                            memesArray.push(obj)\n                        }\n                    })\n\n                    this.setState({\n                        isLoaded: true,\n                        memes: memesArray,\n                        selectedMeme: memesArray[0]\n                    });\n\n                    document.getElementById('selectedMeme').addEventListener('mousedown', this.setPosition)\n                },\n\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    //enlarge clicked iumage from Galery or an image uploaded from the user\n    enlargeImage = (obj) => {\n    \tconst memesToMerge = [this.state.selectedMeme];\n    \tlet temp = {\n            src: obj.src,\n            width: obj.width,\n            height: obj.height,\n            name: obj.name\n        }\n\n    \tif(!this.state.appendImage){\n\t        this.setState({selectedMeme: temp});\t\n    \t} else {\n    \t\tdocument.getElementById('selectedMeme').style.cursor = \"initial\";\n    \t\tmemesToMerge.push(temp);\n    \t\tthis.setState({\n    \t\t\tmemesToMerge: memesToMerge,\n    \t\t\tappendImage: false\n    \t\t}, this.memePromises)\t\n    \t}       \n    }\n\n    memePromises = () => {\n\n    \tconst memesToMerge = this.state.memesToMerge;\n    \tconst promises = []\n    \t\n    \tfor(let i=0; i<2; i++){\n    \t\tpromises.push(this.mergeImages(memesToMerge[i], i))\t\n    \t}\n\n    \tPromise.all(promises).then((values) => {\n  \t\t\tconst newImageSrc = document.getElementById('testCanvas').toDataURL();\n\t    \tthis.setState({selectedMeme: {src: newImageSrc }}); \n\t\t});\n\t}\n\n    loadImage = (url) => {\n    \treturn new Promise((resolve, reject) => {\n    \t\tconst img = new Image();\n    \t\timg.crossOrigin = \"anonymous\";  // This enables CORS\n\t        img.onload = () => resolve(img);\n\t        img.onerror = () => reject(new Error('Loading failed'));\n\t        img.src = url;   \n    \t})\n    }\n\n    mergeImages = (options, i) => { \t\t\n \t\tconst canvas = document.getElementById('testCanvas');\n \t\tconst ctx = canvas.getContext('2d');\n \t\t//canvas.style.display = 'block';\n \t\tctx.canvas.width = this.state.canvasWidth*2;\n        ctx.canvas.height = this.state.canvasHeight*2;\n\n \t\treturn this.loadImage(options.src)\n\t \t\t.then(img => {\n\t \t\t\tif(i === 0){\n\t \t\t\t\tctx.drawImage(img, 0, 0, this.state.canvasWidth*2, this.state.canvasHeight*2); \t\n\t \t\t\t} else {\n\t \t\t\t\tctx.drawImage(img, this.state.posX, this.state.posY); \t\n\t \t\t\t}\n\t            \n\t \t\t}) \n    } \n\n    appendImage = () => {\n    \talert(\"Click on the enlarged meme to select the position where to append the new meme and then choose the meme to append from the Gallery\")\n    \tdocument.getElementById('selectedMeme').style.cursor = \"pointer\";\n    \tthis.setState({ appendImage: true})\n    }\n\n    setPosition = (event) => {\n        const offsetLeft = document.getElementById('selectedMeme').getBoundingClientRect().left;\n        const offsetTop = document.getElementById('selectedMeme').getBoundingClientRect().top;\n        this.setState({\n            posX: event.clientX - offsetLeft,\n            posY: event.clientY - offsetTop\n        })\n    }\n\n\n\n    //TODO: make page endless scroll?\n    showmoreMemes = (event) => {\n        const sampleMemes = [];\n\n        fetch('/samplememes', {\n            mode: 'cors',\n            method: 'get',\n            headers: {\n                'Access-Control-Allow-Origin': '*'\n            }\n        })\n            .then(response => response.json())\n            .then(data => {\n\n                for (var i in data) {\n                    const obj = {\n                        src: data[i].url,\n                        width: data[i].width,\n                        height: data[i].height\n                    }\n                    sampleMemes.push(obj);\n                }\n\n                this.setState({\n                    isLoaded: true,\n                    memes: sampleMemes,\n                    selectedMeme: sampleMemes[0]\n                });\n            });\n    }\n\n    setWidth = (event) => {\n    \tconst num = parseInt(event.target.value)\n    \tif(isNaN(num)){\n    \t\talert(\"Enter a valid number\")\n    \t} else {\n    \t\tthis.setState({canvasWidth: num})\t\n    \t}\n    \t\n    }\n\n    setHeight = (event) => {\n    \tconst num = parseInt(event.target.value)\n    \tif(isNaN(num)){\n    \t\talert(\"Enter a valid number\")\n    \t} else {\n    \t\tthis.setState({canvasHeight: num})\n    \t}\n    }\n\n    imageUploaded = (uploadedImage) => {\n    \tthis.setState({selectedMeme: uploadedImage})\n    }\n\n\n\n    render() {\n        const { error, memes, selectedMeme, isLoaded } = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n\n            return (\n                <div className=\"container\" width=\"300px\">\n                    <h1>OMM Exercise 1</h1>\n                    <div className=\"App\">\n                    \t <canvas id=\"testCanvas\" style={{\n\t                        zIndex: \"1\",\n\t                        display: \"none\",\n\t                        width: this.state.canvasWidth,\n\t                        height: this.state.canvasHeight,\n\t                        margin: \"auto\"\n\t                    }}></canvas>\n                        <MemeEditComponent selectedMeme={selectedMeme} canvasWidth={this.state.canvasWidth} canvasHeight={this.state.canvasHeight}/>\n                        {/*<button onClick={this.appendImage}>Append another image</button>*/}\n                        <div className=\"row\">\n                            <input type=\"text\" placeholder=\"Set canvas width in pixel e.g. 300\" onChange={this.setWidth} ></input>\n                            <input type=\"text\" placeholder=\"Set canvas height in pixel e.g. 300\" onChange={this.setHeight}></input>\n                            <UploadComponent imageUploaded={this.imageUploaded} />\n                        </div>\n                        \n\n                    </div>\n                    <div className=\"galleryContainer\">\n                        <button type=\"button\" id=\"samplememes\" onClick={this.showmoreMemes}>Show more memes</button>\n                        <Gallery photos={memes} onClick={(event) => this.enlargeImage(event.target)} margin={5}/>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\nexport default MemeGalleryComponent;","import React, {Component} from 'react';\n\nclass LoginComponent extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            userName: '',\n            userPassword: ''\n        };\n    }\n\n    componentDidMount(){\n    }\n\n    handleUserNameChange = (e) => {\n        this.setState({userName: e.target.value});\n    }\n\n    handleUserPasswordChange = (e) => {\n        this.setState({userPassword: e.target.value});\n    }\n\n    login = () => {\n        this.props.setToken(\"true\");\n        const data = {\n            userName: this.state.userName,\n            userPassword: this.state.userPassword\n        }\n        fetch('/users/createUser', {\n            method: 'post',\n            mode: 'cors',\n            headers:{\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify(data),\n        })\n            .then((data) => {\n                if(data.status === 200){\n                    console.log('User has been stored to database');\n                }\n            })\n            .catch((error) => console.log( error.response.request) );\n    }\n\n    render(){\n\n\n        return(\n            <div className=\"loginform-wrapper\">\n                <div className=\"loginform\">\n                    <h1 id=\"logincaption\">Please Log In</h1>\n                    <form>\n                        <label>\n                            <p>Username</p>\n                            <input type=\"text\" value={this.state.userName} onChange={this.handleUserNameChange}/>\n                        </label>\n                        <label>\n                            <p>Password</p>\n                            <input type=\"password\" value={this.state.userPassword} onChange={this.handleUserPasswordChange} />\n                        </label>\n                        <div>\n                            <button type=\"submit\" onClick={() => {this.login()}}>Submit</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n        );\n    }\n\n}\n\n\nexport default LoginComponent;","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useLocation } from \"react-router-dom\";\nexport default function HelmetMetaData(props) {\n   //let location = useLocation();\n   let currentUrl = window.location.href; \n   //\"http://www.camperstribe.com\" + location.pathname;\n   let quote = props.quote !== undefined ? props.quote : \"\";\n   let title = props.title !== undefined ? props.title : \"Awesome Meme Generator\";\n   let image = props.image !== undefined ? props.image : \"https://storage.googleapis.com/cmperstribe_storage_usha/Banner/IMG_3640.JPG\";\n   let description = props.description !== undefined ? props.description  : \"This Meme Generator is awesome. You should try it!\";\n   let hashtag = props.hashtag !== undefined ? props.hashtag : \"#memeGenerator\";\nreturn (\n <Helmet>\n     <title>{title}</title>\n     <meta charset=\"utf-8\" />\n     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n     <meta name=\"csrf_token\" content=\"\" />\n     <meta property=\"type\" content=\"website\" />\n     <meta property=\"url\" content={currentUrl} />\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"/>\n     <meta name=\"msapplication-TileColor\" content=\"#ffffff\" />\n     <meta name=\"msapplication-TileImage\" content=\"/ms-icon-144x144.png\" />\n     <meta name=\"theme-color\" content=\"#ffffff\" />\n     <meta name=\"_token\" content=\"\" />\n     <meta name=\"robots\" content=\"noodp\" />\n     <meta property=\"title\" content={title} />\n     <meta property=\"quote\" content={quote} />\n     <meta name=\"description\" content={description} />\n     <meta property=\"image\" content={image} />\n     <meta property=\"og:locale\" content=\"en_US\" />\n     <meta property=\"og:type\" content=\"website\" />\n     <meta property=\"og:title\" content={title} />\n     <meta property=\"og:quote\" content={quote} />\n     <meta property=\"og:hashtag\" content={hashtag} />\n     <meta property=\"og:image\" content={image} />\n     <meta content=\"image/*\" property=\"og:image:type\" />\n     <meta property=\"og:url\" content={currentUrl} />\n     <meta property=\"og:site_name\" content=\"CampersTribe\" />\n     <meta property=\"og:description\" content={description} />    </Helmet>\n);\n}","\nimport React, { Component } from 'react';\nimport MemeGalleryComponent from './Components/MemeGalleryComponent';\nimport LoginComponent from './Components/LoginComponent';\nimport HelmetMetaData from \"./Components/HelmetMetaData\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.setToken = this.setToken.bind(this);\n        this.state = {\n            token: null\n        };\n    }\n\n    setToken = (value) => {\n        this.setState({token: value})\n        sessionStorage.setItem('token', JSON.stringify(value))\n    }\n\n    render(){\n      let shownComponent;\n\n     \n      if(this.state.token === null){\n        shownComponent = <LoginComponent token={this.state.token} setToken={this.setToken}/>;\n      } else {\n        shownComponent = <MemeGalleryComponent/>;\n      }\n      \n      return(\n        <div>\n          {shownComponent}  \n          <HelmetMetaData></HelmetMetaData>\n          \n        </div>\n        \n      )\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport './index.css';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}